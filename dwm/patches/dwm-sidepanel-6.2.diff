diff --git a/config.def.h b/config.def.h
index a2ac963..5b56b15 100644
--- a/config.def.h
+++ b/config.def.h
@@ -7,6 +7,8 @@ static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
+static const int panelwidth         = 300;          /* width of the side panel */
+static const char *paneltitles[]    = { "Conky" };  /* titles of windows to override as side panels */
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
@@ -85,6 +87,7 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,                       XK_s,      togglepanel,    {.ui = 0} },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/dwm.c b/dwm.c
index 5e4d494..99268de 100644
--- a/dwm.c
+++ b/dwm.c
@@ -175,6 +175,7 @@ static long getstate(Window w);
 static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
 static void grabbuttons(Client *c, int focused);
 static void grabkeys(void);
+static void hidepanel(void);
 static void incnmaster(const Arg *arg);
 static void keypress(XEvent *e);
 static void killclient(const Arg *arg);
@@ -205,6 +206,7 @@ static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
+static void showpanel(unsigned int i);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
@@ -212,6 +214,7 @@ static void tagmon(const Arg *arg);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
+static void togglepanel(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
@@ -272,6 +275,9 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+Client *panel = NULL;
+Client *panels[LENGTH(paneltitles)] = {NULL};
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -651,6 +657,15 @@ destroynotify(XEvent *e)
 	Client *c;
 	XDestroyWindowEvent *ev = &e->xdestroywindow;
 
+	if(panel && ev->window == panel->win){
+		for(int i = 0; i < LENGTH(panels); ++i){
+			if(panel == panels[i]){
+				panels[i] = NULL;
+				break;
+			}
+		}
+		hidepanel();
+	}
 	if ((c = wintoclient(ev->window)))
 		unmanage(c, 1);
 }
@@ -964,6 +979,21 @@ grabkeys(void)
 	}
 }
 
+void
+hidepanel(void)
+{
+	Monitor *m;
+	if(!panel)
+		return;
+	m = panel->mon;
+	m->ww = m->mw;
+	m->wx = m->mx;
+	XUnmapWindow(dpy, panel->win);
+	panel = NULL;
+	XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+	arrange(m);
+}
+
 void
 incnmaster(const Arg *arg)
 {
@@ -1032,6 +1062,13 @@ manage(Window w, XWindowAttributes *wa)
 	c->oldbw = wa->border_width;
 
 	updatetitle(c);
+	for(int i = 0; i < LENGTH(paneltitles); ++i){
+		if(panels[i] == NULL && strcmp(c->name, paneltitles[i]) == 0){
+			XUnmapWindow(dpy, w);
+			panels[i] = c;
+			return;
+		}
+	}
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
 		c->tags = t->tags;
@@ -1629,6 +1666,26 @@ showhide(Client *c)
 	}
 }
 
+void
+showpanel(unsigned int i)
+{
+	Monitor *m;
+	if(panel == panels[i])
+		return;
+	if(panel)
+		XUnmapWindow(dpy, panel->win);
+	if(panel && panel->mon != selmon)
+		hidepanel();
+	panel = panels[i];
+	m = panel->mon = selmon;
+	m->ww = m->mw-panelwidth;
+	m->wx = m->mx+panelwidth;
+	XMoveResizeWindow(dpy, panel->win, m->mx, m->my, panelwidth, m->mh);
+	XMapWindow(dpy, panel->win);
+	XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+	arrange(m);
+}
+
 void
 sigchld(int unused)
 {
@@ -1722,6 +1779,20 @@ togglefloating(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+togglepanel(const Arg *arg)
+{
+	unsigned int i = arg->ui;
+	if(i >= LENGTH(paneltitles))
+		return;
+	if(!panels[i])
+		return;
+	if(panel == panels[i])
+		hidepanel();
+	else
+		showpanel(i);
+}
+
 void
 toggletag(const Arg *arg)
 {
